name: CI Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  run-test-scan:
    runs-on: ubuntu-latest

    steps:      
    # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for advanced caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Log in to Amazon ECR

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      # Step 5: Run MongoDB

      
      # Step 6: Build Docker image

      - name: Build Docker image
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t ${{ secrets.ECR_REPO }}:${{ github.sha }} .

      # Step 7: Scan Docker image with Trivy

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPO }}:${{ github.sha }}
          format: 'jsonâ€™'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


      # Step 8: Move cache (if scan passed)

      - name: Move Docker cache
        run: |
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache


      # Step 9: Push image to ECR

#      - name: Push Docker image
#        run: |
#            docker push ${{ secrets.ECR_REPO }}:${{ github.sha }}
#            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#           IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
#            docker tag ${{ secrets.ECR_REPO }}:${{ github.sha }} "$IMAGE_URI"
#            docker push "$IMAGE_URI"

      # Step 10: Deploy to EKS


      # Step 11: Set up Prometheus and Grafana


      # Step 12: Slack notification
     

