name: CI Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                   # your preferred AWS region
  ECR_REPOSITORY: e-commerce-app          # Amazon ECR repository name
  CONTAINER_NAME: e-commerce-container    # container name in task definition

jobs:
  run-test-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for advanced caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1
        env:
          SONAR_TOKEN: 0595444f20a937907db669bdd04b747b740e9f70
          SONAR_PROJECT_KEY: sonar-test-e-commerce_e-commerce-application
          SONAR_ORGANIZATION: sonar-test-e-commerce

      # Step 4: Log in to Amazon ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      # Step 6: Scan Docker image with Trivy
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'json'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Step 7: Move Docker cache (optional)
#      - name: Move Docker cache
#        run: |
#            rm -rf /tmp/.buildx-cache
#            mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Step 8: Push Docker image to ECR (optional)
#      - name: Push Docker image
#        run: |
#            IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
#            docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} "$IMAGE_URI"
#            docker push "$IMAGE_URI"

      # Step 9: Deploy to EKS (placeholder)
#      - name: Deploy to EKS
#        run: echo "Deployment step placeholder"

      # Step 10: Set up Prometheus and Grafana (placeholder)
#      - name: Setup Monitoring
#        run: echo "Prometheus & Grafana setup placeholder"

      # Step 11: Slack notification (placeholder)
#      - name: Slack Notification
#        run: echo "Slack notification placeholder"
